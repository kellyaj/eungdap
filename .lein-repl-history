(println (-> "./public/image.gif" java.io.FileInputStream. .read))
(byte-array (-> "./public/image.gif" java.io.FileInputStream. .read))
(ary 1 2 3 4)
(into [] 1 2 3 4)
(byte-array (-> "./public/image.gif" java.io.FileInputStream. .read))
(byte-array 15)
(byte-array (-> "./public/image.gif" java.io.FileInputStream. .read))
(byte-array 1)
(prn (-> "./public/image.gif" java.io.FileInputStream. .read))
(byte-array (-> "./public/image.gif" java.io.FileInputStream. .read ((-> "./public/image.gif" java.io.FileInputStream. .read))))
(byte-array (-> "./public/image.gif" java.io.FileInputStream. .read 71))
(byte-array (-> "./public/image.gif" java.io.FileInputStream. .read (71)))
(byte-array (-> "./public/image.gif" java.io.FileInputStream. .read 71)))
(byte-array (-> "./public/image.gif" java.io.FileInputStream. .read 71))
(prn (-> "./public/image.gif" java.io.FileInputStream. .read))
(-> "./public/image.gif" java.io.FileInputStream. .getChannel)
(-> (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.io.FileChannel. .transferTo)
(-> (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.nio.FileChannel. .transferTo)
(-> (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.nio.channels.FileChannel. .transferTo)
(-> (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.nio.channels.FileChannel. .transferTo("./public/file1"))
(-> (-> (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.nio.channels.FileChannel. .transferTo) java.nio.channels.FileChannel)
(-> "./public/image.gif" java.io.FileInputStream. .getChannel)
(java.nio.channels.FileChannel.)
(java.nio.channels.FileChannel. "c")
(java.nio.channels.FileChannel. 13)
(-> "./public/image.gif" java.io.FileInputStream. .getChannel)
(java.io.FileInputstream. .getChannel "./public/image.gif")
(java.io.FileInputStream. .getChannel "./public/image.gif")
(java.io.FileInputStream. "./public/image.gif" .getChannel)
(-> "./public/image.gif" java.io.FileInputStream. .getChannel)
(-> (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.nio.channels.TStsdgdg)
(-> (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.nio.channels.TStsdgdg .getSg)
(-> (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.nio.channels.FileChannel))
(-> (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.nio.channels.FileChannel)
(-> (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.nio.channels.FileChannel))
(-> (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.nio.channels.FileChannel .transferto)
(-> (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.nio.channels.FileChannel .transferTo)
(-> (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.nio.channels.FileChannel. .transferTo)
(what-is "hdh")
(-> (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.nio.channels.FileChannel. .transferTo)
(-> "./public/image.gif" java.io.FileInputStream. .getChannel)
(-> *out* (-> "./public/image.gif" java.io.FileInputStream. .getChannel) java.nio.channels.FileChannel. .transferTo)
(-> *out* (-> "./public/image.gif" java.io.FileInputStream. .getChannel) .transferTo)
(-> *out* (-> (-> "./public/image.gif" java.io.File. .getCanonicalFile) java.io.FileInputStream. .getChannel) .transferTo)
(-> *out* (-> (-> "./public/image.gif" java.io.File. .getAbsoluteFile) java.io.FileInputStream. .getChannel) .transferTo)
(-> d (-> (-> "./public/image.gif" java.io.File. .getAbsoluteFile) java.io.FileInputStream. .getChannel) .transferTo)
(-> fn[] (-> (-> "./public/image.gif" java.io.File. .getAbsoluteFile) java.io.FileInputStream. .getChannel) .transferTo)
(FileInputStream. fname)
*out*
(-> "test" *out* .write)
(*out* .write)
(*out*. .write)
(*out* .write "test")
(.write "test")
(.write *out* "test")
*out*
(.getChannel)
(.getChannel out)
(.getChannel *out*)
(let [*out* java.io.SocketOutputStream] (.getChannel *out*))
(:use server.socket) (let [*out* java.io.SocketOutputStream] (.getChannel *out*))
(let [*out* java.io.SocketOutputStream] (.getChannel *out*))
(ByteArrayInputStream.
)
(import '[java.io.*])
(ByteArrayInputStream.)
(-> (.getBytes "abcde") .write ByteArrayOutputStream. ))
(-> (.getBytes "abcde") .write ByteArrayOutputStream. )
(.getBytes "abc")
(require 'java.io.ByteArrayOutputStream)
(require '[java.io ByteArrayOutputStream])
(require '[java.io.ByteArrayOutputStream])
(require '[java.io.OutputStream])
(.getBytes "abc")
(require '[java.io.ByteArrayOutputStream])
(import '[java.io.ByteArrayOutputStream])
(import '[java.io.ByteArrayOutputStream :as baos])
(import '[java.io.ByteArrayOutputStream])
(-> (.getBytes "abc") (ByteArrayOutputStream.) .write)
(import '[java.io.ByteArrayOutputStream]) (-> (.getBytes "abc") (ByteArrayOutputStream.) .write)
(doseq [x ["a" "b" "c"]] (print x))
(let [x []] (doseq [y ["a" "b" "c"]] (into x y )) (println (first x)))
(let [x []] (into x "1") (println (first x)))
(let [x []] (into x "1") (println (peek x)))
(slurp ./public/index.html)
(slurp "./public/index.html")
(.getBytes (slurp "./public/index.html"))
(.getBytes (slurp "./public/404.html"))
(slurp "./public/404.html")
(.getBytes "abcd")
(.length (.getBytes "abcd"))
(.size (.getBytes "abcd"))
(.getBytes "abcd" "UTF-8"))
(.getBytes "abcd" "UTF-8")
(.length (.getBytes "abcd" "UTF-8"))
(.length (.getBytes "UTF-8" "abcde"))
(.getBytes "UTF-8" "abcde")
(.getBytes "abcde")
(.getBytes "abcde" "UTF-8")
(.length (.getBytes "abcde" "UTF-8"))
(.length (.getBytes "abcde"( "UTF-8")))
(.length (.getBytes "abcde" "UTF-8"))
(.getClass (.getBytes "abcde" "UTF-8"))
(.getClass (.getBytes "abcde"))
(.toString (.getBytes "abcde"))
(.clone (.getBytes "abcde"))
(.getClass (.getBytes "abcde"))
(.alength (.getBytes "abcde" "UTF-8"))
(alength (.getBytes "abcde" "UTF-8"))
(byte-array "abc")
(byte-array (.getBytes "abc"))
(byte-array (+ (.getBytes "edf") (.getBytes "abc")))
(byte-array (concat (.getBytes "edf") (.getBytes "abc")))
(println (-> "./public/image.gif" java.io.FileInputStream. .read))
(let [ba (.getBytes "abc")] (apply str (map char ba)))
(clojure.string/join "" (map char (concat (.getBytes "Hello") (.getBytes "World!"))))
(defn get-file-extension [request]                                                    |  8 (defn get-file-name [request]
  8   (if (not= 1 (count (clojure.string/split request #"\.")))                           |  9   (if (= request "GET /")
  9     (if (not= true (-> (peek (clojure.string/split request #"\.")) java.io.File. .isDi| 10       "public"
    rectory))                                                                             | 11       (str (peek (clojure.string/split request
 10       (if (= "." (re-find #"\." request))                                             |     #"/")))))
 11         (peek (clojure.string/split request #"\."))                                   | 12 
 12         "none"))))
(= 1 0)
(= true (= 1 0))
(= true (= 1 0) (= 1 1)))
(= true (= 1 0) (= 1 1))
(= true (= 1 1) (= 1 1))
(-> "./public/index.html" java.io.File. .isFile)
(-> "./public/file1" java.io.File. .isFile)
